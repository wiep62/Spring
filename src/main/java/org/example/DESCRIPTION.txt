БИНЫ:
1. создали Inject (аннотация) к ней нужно иметь доступ в ронтайме @Retention(RetentionPolicy.RUNTIME)
2. создадим класс который буде выводить на консоль какое то значение Injectable, реализуем метод класса дуВорк
3. реализуем класс в который будем внедрять ИНЖЕКТабл класс Source. Пропишем в нем свойства Инжектобл , также нужно отметить это свойство аннотацией инжект (которую мы реализовали ранее).
реализуем простой метод метод Колл (он ничего не возвр-ет, будем использовать инжектобл и вызывать метод ду ворк)
4. создадим контейнер класс BeanFactory - хранилище. в нем есть мапа, ключом которого является тип БИНа , а объектом наш БИН(бит - не разобрать)
- создадим метод регистрации бинов register(будем принимать тип бина)/ создадим mainBean  и передадим в него тип
- создадим метод КРЕАТЕ  (будем использовать рефлекшин АЙ ПИ АЙ - с пом-ю которого будем создавать бин) возвр-им созд-ый бин по типу класса.
Обработаем ошибки, которые предлагает обработать ИДЕЯ.
Теперь этот бин нужно поместить в контейнер (    container.put(type, mainBean); ).
5. т.к. у нас есть аннотация Inject  и в Source хотим заинжектить  наш другой бин, который мы зарегестрируем - РЕАЛИЗУЕМ эту ЛОГИКУ в BeanFactory:
- будем использовать РЕФЛЕКШИН API в register() берем все поля бина mainBean и проверяем что над этим полем стоит аннотация ИНЖЕКТ
если мы поплаи в if то мы попали на свойство которое есть в контейнере и попытаемся его изъять/ проверяем этот бин, если он есть то заинжектим эту зависимость:
           field.setAccessible(true); // затем используем на ФИЛДЕ метод СЕТ:
            field.set(mainBean, bean);  //передаем МАЙНБИН 1-ым параметром, а вторым значением БИН который вытащили из контейнера
обработаем ошибки.
6. реализем метод гетБин (бинФактори) с помощью которого будем получать БИНы :
- получать бины будем по типу;
- возьмем бин из контейнера;
- проверим что бин существует (ошибку лучше выбросим и не будем париться);
- вернем бин и приведем к нужному типу;
7. Применим бинфактор на практике:
- В НУТРИ МАЙН КЛАССА ИНИЦИАЛИЗИРУЕМ БИНФАКТОРИ :
BeanFactory beanFactory = new BeanFactory();
//регистрируем бины:
    beanFactory.register(Injectable.class);
    beanFactory.register(Source.class);

        //получим бин соурс:
        Source source = beanFactory.getBean(Source.class); //получили бин из нашей ФАКТОРИ
        //вывод на консоль:
        source.call(); с помощью метода колл вызвали метод инжект дуВорк

1.3 Spring Context:
- Настройка бинов через Java-конфигурацию;
- Работа с контекстом Spring;
- Настройка бинов через Java-аннотации.



Вывод:
Вы познакомились с базовыми принципами
инициализации бинов с помощью Spring.
Узнали, как можно инициализировать разные
бины одного класса, задавать им имена
и получать доступы к бинам из вашего
приложения.